// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// 

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Teste {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String         @id @map("_id")
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  department    Department[]
  congregation  Congregation[]
  permission    Permission[]
  Transaction   Transaction[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

//////////////////////
model AllowedUser {
  id    String @id @map("_id")
  name  String
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id          String       @id @map("_id")
  name        String
  value       Float
  paymentDate DateTime
  movement    MovementType
  Fund        Fund?        @relation(fields: [fundId], references: [id])
  observation String?
  createdBy   User         @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fundId String?
  userId String
}

model Fund {
  id              String         @id @default(uuid()) @map("_id")
  name            String
  monthPercentage Float
  department      Department[]
  congregation    Congregation[]
  Transaction     Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Member {
  id        String   @id @default(uuid()) @map("_id")
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Department {
  id           String       @id @default(uuid()) @map("_id")
  name         String
  Permission   Permission[]
  congregation Congregation @relation(fields: [congregationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User           User?   @relation(fields: [userId], references: [id])
  userId         String?
  Fund           Fund?   @relation(fields: [fundId], references: [id])
  fundId         String?
  congregationId String
}

model Congregation {
  id   String @id @default(uuid()) @map("_id")
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User       User?        @relation(fields: [userId], references: [id])
  userId     String?
  Permission Permission[]
  Fund       Fund?        @relation(fields: [fundId], references: [id])
  fundId     String?
  Department Department[]
}

model Permission {
  id           String        @id @default(uuid()) @map("_id")
  role         Role          @default(none)
  department   Department?   @relation(fields: [deparmentId], references: [id])
  congregation Congregation? @relation(fields: [congregationId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  User           User?   @relation(fields: [userId], references: [id])
  userId         String?
  congregationId String?
  deparmentId    String?
}

enum Role {
  ADMINISTRADOR
  PASTOR
  LIDER
  TESOUREIRO
  ADMIN
  none
}

enum MovementType {
  ENTRADA
  SAIDA
}
